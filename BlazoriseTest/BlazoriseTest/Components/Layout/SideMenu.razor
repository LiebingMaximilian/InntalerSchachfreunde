@using System.Security.Claims
@using InntalerSchachfreunde.Services
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
<Bar Breakpoint="Breakpoint.Desktop" NavigationBreakpoint="Breakpoint.Tablet" ThemeContrast="ThemeContrast.Dark"
     Mode="BarMode.VerticalInline" CollapseMode="BarCollapseMode.Small">
    <BarToggler />
    <BarBrand>
        <BarItem>
            <BarLink To="">
                <BarIcon IconName="customIcon" />
                 Inntaler Schachfreunde
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarMenu>
        <BarStart>
            <BarItem>
                <BarLink To="/">
                    <BarIcon IconName="IconName.Home" />
                    Home
                </BarLink>
                <BarLink To="/termine">
                    <BarIcon IconName="IconName.Calendar" />
                    Termine
                </BarLink>
                <BarLink To="/anfahrt">
                    <BarIcon IconName="IconName.Map" />
                    Anfahrt
                </BarLink>

                <BarLink To="/articles">
                    <BarIcon IconName="IconName.PaperPlane" />
                    News
                </BarLink>
                <BarLink To="/vm">
                    <BarIcon IconName="IconName.Circle" />
                    Vereinsmeisterschaft
                </BarLink>
                <BarLink To="https://www.ligamanager.schachbund-bayern.de/index.htm">
                    <BarIcon IconName="IconName.Circle" />
                    Kreisliga
                </BarLink>
@*                 <BarLink To="/saveGame" Position="Position.Relative.Bottom">
                    <BarIcon IconName="IconName.Key" />
                    Spiel eintragen
                </BarLink> *@
                <BarLink To="/impressum">
                    <BarIcon IconName="IconName.Copyright" />
                    Impressum
                </BarLink>
                @if (isAuthorized)
                {                  
                    <BarLink To="/createArticle" Position="Position.Relative.Bottom">
                        <BarIcon IconName="IconName.Key" />
                        Artikel anlegen
                    </BarLink>
                    <BarLink To="/createTermin" Position="Position.Relative.Bottom">
                        <BarIcon IconName="IconName.Key" />
                        Termin anlegen
                    </BarLink>
                }
                @if (isAdmin){


                    <BarLink To="/createPlayer" Position="Position.Relative.Bottom">
                        <BarIcon IconName="IconName.Key" />
                        Spieler anlegen
                    </BarLink>
                    <BarLink To="/createTournament" Position="Position.Relative.Bottom">
                        <BarIcon IconName="IconName.Key" />
                        Turnier anlegen
                    </BarLink>
                    <BarLink To="/editValues" Position="Position.Relative.Bottom">
                        <BarIcon IconName="IconName.Key" />
                        KeyValues bearbeiten
                    </BarLink>
                }
                else
                {
                    <BarLink To="/login">
                        <BarIcon IconName="IconName.Key" />
                        Login
                    </BarLink>
                }
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>
@code {
    private bool pagesBarVisible = true;
    private bool isAuthorized = false;
    private bool isAdmin = false;

    RenderFragment customIcon =@<img src="/logoSF.png" style="width:40px" />;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role);
        if (!user.Identity.IsAuthenticated)
        {
            isAuthorized = false;
        }
        else
        {
            isAuthorized = true;
        }
        if (user.Identity.IsAuthenticated && roles.Any(c => c.Value.Contains("Admin")))
        {
            isAdmin = true;
        }
        else
        {
            isAdmin = false;
        }
        await base.OnInitializedAsync();
    }
}