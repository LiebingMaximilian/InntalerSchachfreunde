@page "/"
@inject IVersionProvider VersionProvider
@using InntalerSchachfreunde.Entities
@using InntalerSchachfreunde.Services
@inject AppDbContext DbContext
@inject IKeyValueService KeyValueService;

<Paragraph>
    <Heading Size="HeadingSize.Is2" Margin="Margin.Is3.FromBottom" >@headLineText</Heading>
</Paragraph>
<Paragraph>
    @welcomeText
    <br /> <br />
    <Anchor Class="unstyled-anchor" To="/anfahrt" Padding="Padding.Is2.OnY.Is3.OnX" Border="Border.RoundedPill" TextSize="TextSize.Small" Background="Background.Light">
        Zum Spiellokal
    </Anchor>
    </Paragraph>

    @if (infoBoxText is not null)
    {
        <Alert Color="Color.Info" Visible>

                <Paragraph>
                    @infoBoxText
                </Paragraph>
        </Alert>
    }
<Paragraph>
    Neuigkeiten:
</Paragraph>
<Row Gap="Gap.Is3">
@foreach (var article in articles)
{
        <Column ColumnSize="ColumnSize.Is3.OnWidescreen.Is3.OnDesktop.Is1.OnTablet">
            <Card>
                @if (article.Images.Count > 0)
                {
                    <CardImage Source="@ConvertBlobToBase64(article.Images.First())" />
                }
                <CardBody>
                    <CardTitle Size="5">
                        @article.Headline
                    </CardTitle>
                    <Div Flex="Flex.JustifyContent.Between">
                        <Text>
                            <Icon Name="IconName.CalendarDay" />
                            <Small>@article.ReleaseDate.ToString("dd.MM.yyyy")</Small>
                        </Text>
                    </Div>
                    <Paragraph Margin="Margin.Is3.FromTop">

                        @GetFirstPartOfText(article.Text)
                    </Paragraph>
                    <Anchor To="/articles">
                        Read More
                    </Anchor>
                </CardBody>
            </Card>
        </Column>

}   
</Row>
@code {
    private List<Article> articles { get; set; } = new List<Article>();
    private readonly int textlength = 100;
    private string? headLineText = "Willkommen bei den Inntaler Schachfreunden!";
    private string? welcomeText = "Gespielt wird jeden Freitag um 19:00. Neue Spieler:innen sind herzlich Willkommen!";
    private string? infoBoxText = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            articles = DbContext.Articles.OrderByDescending(e => e.ReleaseDate).Take(3).ToList();
        }
        catch
        {
            Console.WriteLine("Error fetching Db");
            articles = new List<Article> { new Article() { Headline = "An unexpected Error occured. Please try again later" } };
        }
        headLineText = await GetKeyValue("HeadLineText") ?? headLineText;
        welcomeText = await GetKeyValue("WelcomeText") ?? welcomeText;
        infoBoxText = await GetKeyValue("InfoBoxText") ?? infoBoxText;

    }
    private async Task<string?> GetKeyValue(string key)
    {
        try
        {
            return await KeyValueService.GetValue(key);
        }
        catch
        {
            return null;
        }
    }
    public string ConvertBlobToBase64(Entities.Image image)
    {
        if (image.Name is not null && image.Name.EndsWith("jpeg"))
        {
            return $"data:image/jpeg;base64,{Convert.ToBase64String(image.ImageBytes)}";
        }
        if (image.Name is not null && image.Name.EndsWith("jpg"))
        {
            return $"data:image/jpg;base64,{Convert.ToBase64String(image.ImageBytes)}";
        }
        if (image.Name is not null && image.Name.EndsWith("png"))
        {
            return $"data:image/png;base64,{Convert.ToBase64String(image.ImageBytes)}";
        }
        else
        {
            return $"data:image/jpeg;base64,{Convert.ToBase64String(image.ImageBytes)}";
        }
    }
    public string GetFirstPartOfText(string text)
    {
        if (text is null)
        {
            return "";
        }
        if(text.Length > textlength)
        {
            return text.Substring(0, 100) + "...";
        }
        else
        {
            return text;
        }
    }

}
