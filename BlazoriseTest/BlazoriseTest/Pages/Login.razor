@page "/Login"
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@using Blazored.SessionStorage;
@using InntalerSchachfreunde.Services;
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject ISessionStorageService SessionStorage
@inject AuthService AuthService


<Div Margin="Margin.IsAuto.OnX" Width="Width.Is50">
    <Heading Size="HeadingSize.Is2" Margin="Margin.Is3.FromBottom" TextAlignment="TextAlignment.Center">
        Sign in to your account
    </Heading>

    <Card Shadow="Shadow.Default">
        <CardBody>
            <Form>
                <Field>
                    <FieldLabel>
                        Username
                    </FieldLabel>
                    <FieldBody>
                        <TextEdit Placeholder="MaxMuster" Role="TextRole.Email" @bind-Text="@username" />
                    </FieldBody>
                </Field>
                <Field>
                    <FieldLabel>
                        Password
                    </FieldLabel>
                    <FieldBody>
                        <TextEdit Placeholder="********" Role="TextRole.Password" autocomplete="new-password" @bind-Text="@password" />
                    </FieldBody>
                </Field>
                <Field Flex="Flex.Wrap.JustifyContent.Between">
                </Field>
                <Field>
                    <Button Color="Color.Primary" Clicked="@OnSignInClicked" Block>
                        Sign in
                    </Button>
                </Field>
            </Form>
        </CardBody>
    </Card>
    <p>@statusMessage</p>
</Div>

@code {
    private string username;
    private string password;
    private string statusMessage;

    private async Task OnSignInClicked()
    {
        var authRequest = new AuthRequest { Username = username, Password = password };
        var authResponse = await AuthService.Login(authRequest!);
        if (authResponse != null)
        {
            await SessionStorage.SetItemAsync("token", authResponse.Token);
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(authResponse.Token!);
            NavigationManager.NavigateTo("/", true);
        }
    }
}
