@page "/printgameplan"
@using InntalerSchachfreunde.Entities
@inject ITournamentService tournamentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using Blazorise;
@using Blazorise.Components;
@layout Layouts.EmptyLayout;

<h3>@currentTournamentName</h3>

@if (crossTable is not null)
{
    <h4>Spielplan</h4>
    <br>

    <Table Bordered Narrow="true" FullWidth="false" Resizable="false" Responsive="true" Width="Width.Auto">
        @foreach (var grouping in gamesGroupedByDate)
        {
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>@grouping.Key.Value.ToString("dd.MM.yyyy")</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var game in scheduledGames.Where(g => g.Date == grouping.Key.Value))
                {
                    <TableRow>
                        <TableRowCell>@game.PlayerWhite.Name</TableRowCell>
                        <TableRowCell Background="Background.Light">@game.PlayerBlack.Name</TableRowCell>
                    </TableRow>
                }
            </TableBody>
        }
    </Table>
  
}
else
{
    <p>@message</p>
}
<style>
    .vertical-header {
        writing-mode: vertical-rl;
        transform: rotate(180deg);
    }</style>

@code {
    private List<Player> players;
    private CrossTable? crossTable;
    private string? currentTournamentName;
    private List<Game> scheduledGames;
    private IEnumerable<IGrouping<DateOnly?, Game>> gamesGroupedByDate;
    private string message = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        currentTournamentName = await tournamentService.GetCurrentTournamentName();
        crossTable = await tournamentService.GetCrossTableOfTournament(currentTournamentName);
        if (crossTable is null)
        {
            message = "Keine Vereinsmeisterschaft gefunden";
            return;
        }
        scheduledGames = await tournamentService.GetScheduledGames(currentTournamentName);
        gamesGroupedByDate = scheduledGames.GroupBy(g => g.Date).OrderBy(g => g.Key);
        StateHasChanged();
        await JS.InvokeVoidAsync("print");
    }
}
