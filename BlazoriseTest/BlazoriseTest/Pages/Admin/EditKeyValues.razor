@page "/editValues"
@using InntalerSchachfreunde.Entities;
@using InntalerSchachfreunde.Services;
@inject IKeyValueService keyValueService;
@inject NavigationManager NavigationManager;
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
<h2>EditKeyValues</h2>
@foreach (var keyValue in keyValues)
{
    <Field Padding="Padding.Is2">
    <h3>@keyValue.Key</h3>
    <TextEdit Placeholder="Passwort" @bind-Text=@keyValues.Single(k => k.Key == keyValue.Key).Value />
        <Field Padding="Padding.Is1">
        <Button Color="Color.Primary" onclick="@(() => UpdateKeyValue(keyValue.Key))">Speichern</Button>
    </Field>
    </Field>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <Notification Color="Color.Danger">
        @errorMessage
    </Notification>
}

@code 
{
    private List<KeyValue> keyValues = new List<KeyValue>();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role);
        if (!user.Identity.IsAuthenticated || !roles.Any(c => c.Value.Contains("Admin")))
        {
            NavigationManager.NavigateTo("/Login");
        }
        keyValues = await keyValueService.GetAllKeyValues();
    }

    private async Task UpdateKeyValue(string key)
    {
        try
        {
            var value = keyValues.Single(k => k.Key == key).Value;
            var success = await keyValueService.SetValue(key, value);
            if (!success)
            {
                errorMessage = $"Wert für Key '{key}' konnte nicht geändert werden";
                return;
            }
            errorMessage = $"Wert für Key '{key}' erfolgreich zu '{value} 'geändert";
            StateHasChanged();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}

